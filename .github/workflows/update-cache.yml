# Access restrictions provide cache isolation and security by creating a logical boundary between different branches.
# For example, a cache created for the branch feature-a (with the base main) would not be accessible to a pull request for the branch feature-b (with the base main).
# But cache created for a default branch of a repository is accesible for every branch.
# So this workflow updates Cache that then can be accessible by other branches. 
name: Update Cache
run-name: Update Cache

on:
  push:
    branches:
      - "master"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Load common environment variables
      run: |
        source .github/workflows/common.env
        echo "JAVA_VERSION=$JAVA_VERSION" >> $GITHUB_ENV
        echo "FLUTTER_VERSION=$FLUTTER_VERSION" >> $GITHUB_ENV
        echo "FASTLANE_VERSION=$FASTLANE_VERSION" >> $GITHUB_ENV
        echo "RUBY_VERSION=$RUBY_VERSION" >> $GITHUB_ENV

    - name: Decrypt secrets
      env:
        SECRETS_PASSWORD: ${{ secrets.SECRETS_PASSWORD }}
      run: |
            ./tools/secrets/decrypt_secrets.sh
            
    #  Cache saves only if a whole workflow was successful.
    - name: Cache Tools
      id: cache-tools
      uses: actions/cache@v4
      with:
        path: |
            /home/runner/.local/share/mise/
        key: ${{ runner.os }}-cache-tools-flutter${{ env.FLUTTER_VERSION }}-ruby${{ env.RUBY_VERSION }}-java${{ env.JAVA_VERSION }}-fastlane${{ env.FASTLANE_VERSION }}
    
    - name: Install mise
      run: |
          curl https://mise.run | sh
    
    - name: Install Tools
      if: steps.cache-tools.outputs.cache-hit != 'true'
      run: |
          mise install
          mise exec -- gem install fastlane -v ${{ env.FASTLANE_VERSION }}